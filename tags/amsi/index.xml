<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AMSI on Cheesy Rumbles</title>
    <link>https://rastamouse.me/tags/amsi/</link>
    <description>Recent content in AMSI on Cheesy Rumbles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 31 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://rastamouse.me/tags/amsi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AmsiScanBuffer Bypass - Part 4</title>
      <link>https://rastamouse.me/blog/asb-bypass-pt4/</link>
      <pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/blog/asb-bypass-pt4/</guid>
      <description>&lt;p&gt;As 2018 rapidly comes to an end, I thought I&amp;rsquo;d close out the year by clearing up some confusions over this AmsiScanBuffer bypass and why it appears to fail under some circumstances.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AmsiScanBuffer Bypass - Part 3</title>
      <link>https://rastamouse.me/blog/asb-bypass-pt3/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/blog/asb-bypass-pt3/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://rastamouse.me/2018/10/amsiscanbuffer-bypass---part-2/&#34;&gt;Part 2&lt;/a&gt;, we engineered a delivery method for the AmsiScanBuffer Bypass discussed in &lt;a href=&#34;https://rastamouse.me/2018/10/amsiscanbuffer-bypass---part-1/&#34;&gt;Part 1&lt;/a&gt;.  In this post, we&amp;rsquo;ll make some modifications to the bypass itself.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AmsiScanBuffer Bypass - Part 2</title>
      <link>https://rastamouse.me/blog/asb-bypass-pt2/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://rastamouse.me/blog/asb-bypass-pt2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://rastamouse.me/2018/10/amsiscanbuffer-bypass---part-1/&#34;&gt;Part 1&lt;/a&gt;, we had a brief look at the AmsiScanBuffer bypass technique.  We found some circumstances where the bypass code would be identified as malicious before it could be executed (which turned out to be a simple string detection), and modified the code to circumvent this.&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll explore a delivery method to help stage a Cobalt Strike / Empire / &amp;lt;insert framework here&amp;gt; agent.  As with Part 1, this is not about some 1337 code drop - it&amp;rsquo;s a demonstration of how I walked through engineering the final result.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s get cracking.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>